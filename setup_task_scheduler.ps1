#!/usr/bin/env pwsh
<#
.SYNOPSIS
    Configure Windows Task Scheduler pour ex√©cuter la veille technologique quotidiennement

.DESCRIPTION
    Cr√©e une t√¢che planifi√©e Windows qui ex√©cute la veille technologique tous les jours
    √† l'heure sp√©cifi√©e et ouvre automatiquement le rapport

.PARAMETER TaskTime
    Heure d'ex√©cution quotidienne (format HH:mm, par d√©faut 09:00)

.PARAMETER TaskName
    Nom de la t√¢che dans le planificateur (par d√©faut "MastermaintTechWatch")

.EXAMPLE
    .\setup_task_scheduler.ps1
    Configure la t√¢che pour s'ex√©cuter √† 09:00

.EXAMPLE
    .\setup_task_scheduler.ps1 -TaskTime "08:30"
    Configure la t√¢che pour s'ex√©cuter √† 08:30
#>

[CmdletBinding()]
param(
    [string]$TaskTime = "09:00",
    [string]$TaskName = "MastermaintTechWatch"
)

# V√©rifier les privil√®ges administrateur
function Test-Administrator {
    $currentUser = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
    return $currentUser.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

# Configuration
$ScriptDir = Split-Path -Parent $MyInvocation.MyCommand.Path
$RunScript = Join-Path $ScriptDir "run_tech_watch.ps1"

Write-Host "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" -ForegroundColor Cyan
Write-Host "‚ïë   Configuration du Planificateur de T√¢ches Windows                ‚ïë" -ForegroundColor Cyan
Write-Host "‚ïë   Veille Technologique mastermaint                                 ‚ïë" -ForegroundColor Cyan
Write-Host "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`n" -ForegroundColor Cyan

# V√©rification des privil√®ges
if (-not (Test-Administrator)) {
    Write-Host "‚ö†Ô∏è  Ce script n√©cessite des privil√®ges administrateur" -ForegroundColor Yellow
    Write-Host "   Relancez PowerShell en tant qu'administrateur et r√©essayez" -ForegroundColor Yellow
    exit 1
}

# V√©rifier que le script existe
if (-not (Test-Path $RunScript)) {
    Write-Host "‚ùå Script introuvable: $RunScript" -ForegroundColor Red
    exit 1
}

try {
    # Supprimer la t√¢che existante si elle existe
    $existingTask = Get-ScheduledTask -TaskName $TaskName -ErrorAction SilentlyContinue
    if ($existingTask) {
        Write-Host "üóëÔ∏è  Suppression de la t√¢che existante..." -ForegroundColor Yellow
        Unregister-ScheduledTask -TaskName $TaskName -Confirm:$false
    }
    
    # Configuration de l'action
    $action = New-ScheduledTaskAction `
        -Execute "powershell.exe" `
        -Argument "-NoProfile -ExecutionPolicy Bypass -File `"$RunScript`" -OpenReport" `
        -WorkingDirectory $ScriptDir
    
    # Configuration du d√©clencheur (quotidien)
    $trigger = New-ScheduledTaskTrigger -Daily -At $TaskTime
    
    # Configuration des param√®tres
    $settings = New-ScheduledTaskSettingsSet `
        -AllowStartIfOnBatteries `
        -DontStopIfGoingOnBatteries `
        -StartWhenAvailable `
        -RunOnlyIfNetworkAvailable
    
    # Principal (utilisateur actuel)
    $principal = New-ScheduledTaskPrincipal `
        -UserId $env:USERNAME `
        -RunLevel Limited
    
    # Description
    $description = "Veille technologique quotidienne pour l'infrastructure mastermaint. Agr√®ge les flux RSS des technologies utilis√©es et g√©n√®re un rapport HTML."
    
    # Cr√©er la t√¢che
    Register-ScheduledTask `
        -TaskName $TaskName `
        -Action $action `
        -Trigger $trigger `
        -Settings $settings `
        -Principal $principal `
        -Description $description | Out-Null
    
    Write-Host "‚úÖ T√¢che planifi√©e cr√©√©e avec succ√®s!" -ForegroundColor Green
    Write-Host "`nüìã D√©tails de la t√¢che:" -ForegroundColor Cyan
    Write-Host "   Nom          : $TaskName" -ForegroundColor White
    Write-Host "   Heure        : $TaskTime (quotidien)" -ForegroundColor White
    Write-Host "   Script       : $RunScript" -ForegroundColor White
    Write-Host "   Utilisateur  : $env:USERNAME" -ForegroundColor White
    
    Write-Host "`nüí° Conseils:" -ForegroundColor Yellow
    Write-Host "   ‚Ä¢ La t√¢che s'ex√©cutera tous les jours √† $TaskTime" -ForegroundColor White
    Write-Host "   ‚Ä¢ Le rapport s'ouvrira automatiquement dans votre navigateur" -ForegroundColor White
    Write-Host "   ‚Ä¢ Pour modifier l'heure, relancez ce script avec -TaskTime" -ForegroundColor White
    Write-Host "   ‚Ä¢ Pour g√©rer la t√¢che: Planificateur de t√¢ches > Biblioth√®que" -ForegroundColor White
    
    Write-Host "`nüß™ Voulez-vous tester la t√¢che maintenant? (O/N)" -ForegroundColor Cyan -NoNewline
    $response = Read-Host " "
    
    if ($response -eq "O" -or $response -eq "o") {
        Write-Host "`n‚ñ∂Ô∏è  Lancement de la t√¢che..." -ForegroundColor Cyan
        Start-ScheduledTask -TaskName $TaskName
        Write-Host "‚úÖ T√¢che lanc√©e! V√©rifiez la sortie dans une nouvelle fen√™tre." -ForegroundColor Green
    }
    
    Write-Host ""
}
catch {
    Write-Host "‚ùå Erreur lors de la cr√©ation de la t√¢che: $_" -ForegroundColor Red
    exit 1
}
